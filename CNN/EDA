결측치 제거
import pandas as pd

# 데이터프레임 불러오기
df = pd.read_csv("data.csv")

# 결측치 확인
print(df.isnull().sum())

# 결측치가 있는 행 제거
df = df.dropna()

# 또는 결측치를 평균값으로 대체
df.fillna(df.mean(), inplace=True)

레이블 확인
# 레이블의 값 종류 확인
print(df['label'].unique())

# 각 레이블 값의 개수 확인
print(df['label'].value_counts())

데이터 및 레이블 인코딩
from sklearn.preprocessing import LabelEncoder, OneHotEncoder

# 레이블 인코딩 (예: 'male', 'female' -> 0, 1)
label_encoder = LabelEncoder()
df['encoded_label'] = label_encoder.fit_transform(df['label'])

# 원-핫 인코딩 (예: 'red', 'blue', 'green' -> [1, 0, 0], [0, 1, 0], [0, 0, 1])
df = pd.get_dummies(df, columns=['color'])  # 'color' 열을 원-핫 인코딩

전체
import pandas as pd
from sklearn.preprocessing import LabelEncoder

# 데이터 불러오기
df = pd.read_csv('data.csv')

# 결측치 확인 및 제거
print(df.isnull().sum())
df = df.dropna()

# 레이블 확인
print(df['Outcome'].value_counts())

# 레이블 인코딩
label_encoder = LabelEncoder()
df['Outcome'] = label_encoder.fit_transform(df['Outcome'])

# 결과 확인
print(df.head())



------------------------------------------------
# 필요한 라이브러리 임포트
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# 데이터 로드
data = pd.read_csv('titanic.csv')

# 1. 기본 정보 확인
print(data.head())  # 데이터의 상위 5개 행 출력
print(data.info())  # 데이터의 정보 출력
print(data.describe())  # 수치형 데이터에 대한 기초 통계량 출력

# 2. 결측치 확인 및 처리
missing_values = data.isnull().sum()
print(missing_values[missing_values > 0])  # 결측치가 있는 열만 출력

# 결측치 처리 예시 (나이는 평균값으로 대체)
data['Age'].fillna(data['Age'].mean(), inplace=True)
data.drop(columns=['Cabin'], inplace=True)  # Cabin 열 제거
data.dropna(inplace=True)  # 남은 결측치 제거

# 3. 기초 통계량 분석
print(data.describe(include='all'))  # 모든 열의 통계량 출력

# 4. 데이터 분포 시각화
plt.figure(figsize=(10, 5))
sns.histplot(data['Age'], bins=30, kde=True)
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 5))
sns.countplot(x='Survived', data=data)
plt.title('Survival Count')
plt.xlabel('Survived (0 = No, 1 = Yes)')
plt.ylabel('Count')
plt.show()

# 5. 상관관계 분석
correlation_matrix = data.corr()
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# 6. 범주형 변수 분석
plt.figure(figsize=(10, 5))
sns.countplot(x='Pclass', hue='Survived', data=data)
plt.title('Survival by Passenger Class')
plt.xlabel('Passenger Class')
plt.ylabel('Count')
plt.legend(title='Survived', loc='upper right', labels=['No', 'Yes'])
plt.show()

plt.figure(figsize=(10, 5))
sns.barplot(x='Sex', y='Survived', data=data)
plt.title('Survival Rate by Gender')
plt.ylabel('Survival Rate')
plt.show()

데이터 로드 및 기본 정보 확인:

pd.read_csv()를 사용하여 CSV 파일로부터 데이터를 로드합니다.
head(), info(), describe() 메서드를 사용해 데이터의 전반적인 구조를 확인합니다.
결측치 처리:

결측치가 있는 열을 찾아보고, 'Age' 열의 결측치는 평균으로 대체합니다.
'Cabin' 열은 결측치가 많으므로 제거하고, 나머지 결측치는 드롭합니다.
기초 통계량 분석:

수치형 변수와 범주형 변수에 대한 기초 통계량을 확인합니다.
데이터 분포 시각화:

histplot()을 사용하여 'Age'의 분포를 시각화하고, countplot()으로 생존 여부에 대한 카운트를 시각화합니다.
상관관계 분석:

상관관계 매트릭스를 생성하고 이를 시각화하여 변수 간의 관계를 확인합니다.
범주형 변수 분석:

countplot()을 사용해 승객 클래스별 생존 여부를 분석하고, barplot()으로 성별에 따른 생존율을 시각화합니다.
